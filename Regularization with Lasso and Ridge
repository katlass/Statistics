import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn import preprocessing
import seaborn as sns
#%matplotlib inline
from sklearn.linear_model import (LinearRegression, Ridge, Lasso, RandomizedLasso)


kc = pd.read_csv("EdensSKLEARN.csv")
print(kc.head())
print(kc.shape)
print(kc.dtypes)
plt.show()

# extract our target variable -- House prices -- into an array 
y = kc.Quantity.values
print(y) 

# Drop price from the house dataframe 
kc = kc.drop(['Quantity'], axis=1)
#print(kc)

# Create a matrix from the remaining data
X = kc.as_matrix()
print(X)
# Store the column/feature names into a list "colnames"
colnames = kc.columns

# create a lasso regressor
lasso = Lasso(alpha=0.2, normalize=True)

# Fit the regressor to the data
lasso.fit(X,y)

# Compute and print the coefficients
lasso_coef = lasso.coef_
print(lasso_coef)

# Plot the coefficients
plt.plot(range(len(colnames)), lasso_coef)
plt.xticks(range(len(colnames)), colnames.values, rotation=60) 
plt.margins(0.02)
plt.show()

#wherever highest spike is, It clearly shows that it is the most important variable terms of predicting y.

# Import the necessary module
from sklearn.model_selection import cross_val_score

# Create a linear regression object: reg
reg = LinearRegression()

# Compute 5-fold cross-validation scores: cv_scores
cv_scores = cross_val_score(reg, X, y, cv=5)

# Print the 5-fold cross-validation scores
print(cv_scores)

# find the mean of our cv scores here
print("Average 5-Fold CV Score: {}".format(np.mean(cv_scores)))

#Below we'll run a ridge regression and see how score varies with different alphas.
#This will show how picking a different alpha score changes the R2.


from sklearn.linear_model import Ridge

# Create an array of alphas and lists to store scores
alpha_space = np.logspace(-4, 0, 50)
ridge_scores = []
ridge_scores_std = []

# Create a ridge regressor: ridge
ridge = Ridge(normalize=True)

# Compute scores over range of alphas
for alpha in alpha_space:

    # Specify the alpha value to use: ridge.alpha
    ridge.alpha = alpha
    
    # Perform 10-fold CV: ridge_cv_scores
    ridge_cv_scores = cross_val_score(ridge, X, y, cv=10)
    
    # Append the mean of ridge_cv_scores to ridge_scores
    ridge_scores.append(np.mean(ridge_cv_scores))
    
    # Append the std of ridge_cv_scores to ridge_scores_std
    ridge_scores_std.append(np.std(ridge_cv_scores))
   # print(alpha)

# Use this function to create a plot    
def display_plot(cv_scores, cv_scores_std):
    fig = plt.figure()
    ax = fig.add_subplot(1,1,1)
    ax.plot(alpha_space, cv_scores)

    std_error = cv_scores_std / np.sqrt(10)

    ax.fill_between(alpha_space, cv_scores + std_error, cv_scores - std_error, alpha=0.2)
    ax.set_ylabel('CV Score +/- Std Error')
    ax.set_xlabel('Alpha')
    ax.axhline(np.max(cv_scores), linestyle='--', color='.5')
    ax.set_xlim([alpha_space[0], alpha_space[-1]])
    ax.set_xscale('log')
    plt.show()

# Display the plot
display_plot(ridge_scores, ridge_scores_std)

import pandas as pd

import numpy as np
import scipy
import statsmodels.api as sm

from sklearn.preprocessing import PolynomialFeatures
# Import Linear Regression and a regularized regression function
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LassoCV
# Finally, import function to make a machine learning pipeline
from sklearn.pipeline import make_pipeline

# Alpha (regularization strength) of LASSO regression
lasso_eps = 0.0001
lasso_alpha=200
lasso_iter=5000
# Min and max degree of polynomials features to consider
degree_min = 2
degree_max = 8



df = pd.read_csv("EdensSKLEARN.csv") #index_col=0)
#why is it not understanding first column again
print(list(df))



feature = df[['Price','Advetisement']]
label = df['Quantity']

from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score



# Model Training 
x = feature[:]
y = label
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.1)
#print(x_train)


lasso_cv = LassoCV(eps=lasso_eps, n_alphas=lasso_alpha, max_iter=lasso_iter, normalize=True, cv=5)
model = make_pipeline(PolynomialFeatures(degree=2, interaction_only=False), lasso_cv)
model.fit(x_train, y_train.values.ravel())

y_predict = model.predict(x_test)
model_score = model.score(x_test, y_test)
print(f"Accuracy: {model_score}")
